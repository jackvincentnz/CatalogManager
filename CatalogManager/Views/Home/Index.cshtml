@{
    ViewBag.Title = "Home";
}

<div class="jumbotron">
    <h1>Best Buy Catalog Manager</h1>
    <p class="lead">Example catalog manager developed for candidate technical assessment.</p>
    @Html.ActionLink("View Catalog »", "Index", "Catalog", null, new { @class = "btn btn-primary btn-lg"})
</div>

<div class="row">
    <div class="col-md-4">
        <h2>Question</h2>
        <p>
            Create a web application called “Catalog manager” which allows users to manage
            and maintain a Best Buy e-commerce product catalog.
            The catalog contains a hierarchy of categories which products can be assigned to.
        </p>
        <p>
            Category contains a name, other child categories, and a collection of products.
            A product contains a name, description and price.
        </p>
        <p>
            Users should be able to create, update, and delete categories as well as create,
            update, and delete products under each category.
        </p>
    </div>
    <div class="col-md-4">
        <h2>Assumptions</h2>
        <p>Design assumptions made:</p>
        <ul>
            <li>Products can belong to only one category.</li>
            <li>Products can't exist without a category.</li>
            <li>Categories can have only one parent category.</li>
        </ul>
        <h2>Technologies Used</h2>
        <p>Brief summary of technologies used in solution:</p>
        <ul>
            <li>MVC 5</li>
            <li>Entity Framework 6</li>
            <li>AutoFac</li>
            <li>Bootstrap</li>
            <li>SQL Server Local Db</li>
        </ul>
    </div>
    <div class="col-md-4">
        <h2>Notes</h2>
        <p>Improvement Areas:</p>
        <ul>
            <li>Could have further abstracted the data access layer by implementing the repository and unit of work patterns.</li>
            <li>Shortcuts used by keeping the same domain objects throughout. A better approach is to have separate view models, domain and data objects, linking them with property mappers.</li>
            <li>Async functions & controllers.</li>
            <li>More unit testing of Service Layer.</li>
            <li>Improved exception handling and logging of all requests.</li>
            <li>Improve domain validation. (negative prices, max-lengths etc.)</li>
            <li>Provide ability to move products/categories to other categories when editing.</li>
        </ul>
    </div>
</div>